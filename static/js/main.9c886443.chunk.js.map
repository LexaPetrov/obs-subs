{"version":3,"sources":["components/Checkbox.js","components/Main.js","components/LinkPage.js","App.js","serviceWorker.js","index.js"],"names":["name","value","text","onChange","checked","style","margin","className","type","props","loc","window","location","origin","useState","link","params","theme","goal","videos","subs","views","transparent","lang","res","clicked","state","setState","handleChange","e","target","href","onSubmit","event","preventDefault","placeholder","required","Checkbox","trim","htmlFor","onClick","id","alt","src","channel","Object","keys","map","p","decodeURI","includes","split","process","textField","document","createElement","innerText","body","appendChild","select","execCommand","remove","pathname","length","search","info","subscriberCount","videoCount","viewCount","vals","newParam","undefined","push","newParams","assign","n","i","useEffect","setInterval","fetch","then","json","items","statistics","catch","err","background","App","path","exact","component","Main","LinkPage","Boolean","hostname","match","ReactDOM","render","basename","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.9c886443.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css'\n\nexport default ({ name, value, text, onChange, checked }) => {\n\n    return (\n        <div style={{margin: '20px'}}>\n            <label className=\"label\">\n                <div className=\"toggle\">\n                    <input className=\"toggle-state\" checked={checked} onChange={onChange} type=\"checkbox\" name={name} value={value} />\n                    <div className=\"toggle-inner\">\n                        <div className=\"indicator\"></div>\n                    </div>\n                    <div className=\"active-bg\"></div>\n                </div>\n                <div className=\"label-text\">{text}</div>\n            </label>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport Checkbox from './Checkbox'\n\nimport '../index.css'\n\nexport default props => {\n    const loc = window.location.origin\n    const [state, setState] = useState({\n        loc,\n        link: '',\n        params: {\n            theme: '1',\n            goal: '',\n            videos: false,\n            subs: true,\n            views: false,\n            transparent: '1',\n            lang: 'ru'\n\n        },\n        res: '',\n        clicked: false,\n        checked: false\n    })\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function buttonClick() {\n        let params = ''\n        Object.keys(state.params).map(p => {\n            if (state.params[p] !== '') {\n                params += `${p}=${state.params[p]}&`\n            }\n            return 0\n        })\n        let channel\n        if (state.link !== '') {\n            channel = decodeURI(state.link)\n            if (!channel.includes('youtube.com')) {\n                channel = 'https://www.youtube.com/channel/' + channel\n            }\n            channel = channel.split('/')[4].split('?')[0]\n        }\n\n        setState({\n            ...state,\n            res: `${state.loc}${process.env.PUBLIC_URL}/${channel}?${params}`,\n            clicked: true\n        })\n    }\n\n\n    function handleParamsChange(e) {\n        setState({\n            ...state,\n            params: {\n                ...state.params,\n                [e.target.name]: e.target.value.trim()\n            }\n        })\n    }\n\n    function copyToClipBoard() {\n        const textField = document.createElement('textarea');\n        textField.innerText = state.res;\n        document.body.appendChild(textField);\n        textField.select();\n        document.execCommand('copy');\n        textField.remove();\n    }\n\n\n    return (\n        <div className='wrapper'>\n            <h2>\n                1. Вставь ссылку на канал в формате https://www.youtube.com/channel/ID_канала <br />\n                Или вставь ID канала, узнать его можешь по этой ссылке: <a href='https://www.youtube.com/account_advanced'>https://youtube.com/account_advanced</a>\n            </h2>\n            <div className='inputContainer'>\n                <form onSubmit={(event) => { event.preventDefault() }}>\n                    <input type='text' placeholder='Ссылка или ID канала' required value={state.link} name='link' onChange={handleChange} />\n                    <div className='tools'>\n                        <div>\n                            <Checkbox\n                                name='checked'\n                                onChange={() => setState({\n                                    ...state,\n                                    checked: !state.checked\n                                })}\n                                checked={state.checked}\n                                text='Добавить цель кол-ва подписчиков'\n                            />\n                            <div>\n                                {\n                                    state.checked ? <input\n                                        type='number'\n                                        value={state.params.goal}\n                                        name='goal'\n                                        placeholder='Введи число'\n                                        onChange={handleParamsChange}\n                                    /> : null\n                                }\n                            </div>\n\n                        </div>\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    subs: !state.params.subs\n                                }\n                            })}\n                            checked={state.params.subs}\n                            text='Показывать число подписчиков'\n                        />\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    videos: !state.params.videos\n                                }\n                            })}\n                            checked={state.params.videos}\n                            text='Показывать число загруженных видео'\n                        />\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    views: !state.params.views\n                                }\n                            })}\n                            checked={state.params.views}\n                            text='Показывать число просмотров'\n                        />\n                        <Checkbox\n                        name='transparent'\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    transparent: '1'\n                                }\n                            })}\n                            checked={state.params.transparent === '1'}\n                            text='Прозрачный фон'\n                            value='1'\n                        />\n                        <Checkbox\n                        name='transparent'\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    transparent: '2'\n                                }\n                            })}\n                            checked={state.params.transparent === '2'}\n                            text='Полупрозрачный тёмный фон'\n                            value='2'\n                        />\n                        <Checkbox\n                        name='transparent'\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    transparent: '3'\n                                }\n                            })}\n                            checked={state.params.transparent === '3'}\n                            text='Тёмный непрозрачный фон'\n                            value='3'\n                        />\n                        <Checkbox\n                        name='lang'\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    lang: state.params.lang === 'ru' ? 'eng' : 'ru'\n                                }\n                            })}\n                            checked={state.params.lang === 'eng'}\n                            text='🇺🇸english'\n                        />\n                    </div>\n                    <h2>2. Выбери тему для своего счётчика</h2>\n                    <div className='themes'>\n                        <div className='themeItem'>\n                            <label htmlFor='theme1'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '1'\n                                        }\n                                    })\n                                }} type=\"radio\" name=\"theme\" id='theme1' value=\"1\" />\n                                <img alt='' src='theme1.png' />\n                            </label>\n                        </div>\n                        <div className='themeItem'>\n                            <label htmlFor='theme2'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '2'\n                                        }\n                                    })\n                                }} type=\"radio\" id='theme2' name=\"theme\" value=\"2\" />\n                                <img alt='' src='theme2.png' />\n                            </label>\n                        </div>\n                        <div className='themeItem'>\n                            <label htmlFor='theme3'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '3'\n                                        }\n                                    })\n                                }} type=\"radio\" name=\"theme\" id='theme3' value=\"3\" />\n                                <img alt='' src='theme3.png' />\n                            </label>\n                        </div>\n                    </div>\n                    <button type='submit' className='go' onClick={buttonClick}>\n                        3. Получи ссылку для OBS\n                    </button>\n                    <div>\n                        {\n                            state.clicked && state.link !== '' ? <input\n                                type='text'\n                                value={state.res}\n                                name='res'\n                                onChange={handleChange}\n                            /> : null\n                        }\n                        {\n                            state.clicked && state.link !== '' ? <button className='go' onClick={copyToClipBoard}>Скопировать в буфер обмена</button> : null\n                        }\n                        {\n                            state.clicked && state.link !== '' ?\n                                <h2>4. Вставь полученную ссылку в CLR браузер OBS</h2> : null\n                        }\n                    </div>\n                </form>\n\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport '../index.css'\n\nexport default props => {\n    const link = window.location.pathname.split('/')[window.location.pathname.split('/').length - 1]\n    const params = window.location.search.split('&')\n    params[0] = params[0].split('?')[1]\n    const [state, setState] = useState({\n        link,\n        info: {\n            subscriberCount: '',\n            videoCount: '',\n            viewCount: ''\n        },\n        params: {\n            theme: '',\n            goal: '',\n            videos: false,\n            subs: false,\n            views: false,\n            transparent: '1',\n            lang: 'ru'\n        }\n    })\n\n    let keys = []\n    let vals = []\n\n    params.map(p => {\n        let newParam = (p.split('='))\n        if (newParam[0] !== '' || newParam[1] !== undefined) {\n            keys.push(newParam[0])\n            vals.push(newParam[1])\n        }\n\n        return 0\n    })\n\n    let newParams = Object.assign(...keys.map((n, i) => ({ [n]: vals[i] })))\n\n\n    useEffect(() => {\n        setInterval(() => {\n            fetch(`https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${state.link}&key=AIzaSyDnICHbhs5jRfs_pxfWq26ZR9j32iZwedU`)\n                .then(res => {\n                    return res.json()\n                })\n                .then((res) => {\n                    if (res.items.length !== 0) {\n                        setState({\n                            ...state,\n                            info: {\n                                subscriberCount: res.items[0].statistics.subscriberCount,\n                                videoCount: res.items[0].statistics.videoCount,\n                                viewCount: res.items[0].statistics.viewCount\n                            },\n                            params: newParams\n                        })\n                    }\n                }).catch(err => { })\n        }, 600000)\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n    const styles = [\n        { background: 'rgba(0,0,0,0)' },\n        { background: 'rgba(57,57,57,0.5)' },\n        { background: 'rgba(57,57,57,1)' }\n    ]\n\n    return (\n        <div className='wrapper' style={styles[+state.params.transparent - 1]}>\n            <div className={`link_theme${state.params.theme}`}>\n                {\n                    state.params.subs === 'true'\n                        ? state.params.goal !== '' && state.params.goal !== undefined ?\n                            <label>\n                                {state.params.lang === 'ru' ? 'Подписчиков: ' : 'Sub goal: '}{state.info.subscriberCount}  /  {state.params.goal}\n                            </label> : <label>{state.params.lang === 'ru' ? 'Подписчиков: ' : 'Subscribers: '} {state.info.subscriberCount} </label>\n                        : null\n                }\n                {\n                    state.params.videos === 'true' ? <label> {state.params.lang === 'ru' ? 'Загружено видео: ' : 'Videos amount: '} {state.info.videoCount} </label> : null\n                }\n                {\n                    state.params.views === 'true' ? <label>{state.params.lang === 'ru' ? 'Просмотров всего: ' : 'Views amount: '}  {state.info.viewCount} </label> : null\n                }\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './index.css'\nimport { Route, Switch } from 'react-router-dom'\nimport Main from './components/Main'\nimport LinkPage from './components/LinkPage'\n\nfunction App() {\n  return (\n   <Switch>\n     <Route path={process.env.PUBLIC_URL + '/'} exact component={Main} />\n     <Route path={process.env.PUBLIC_URL + '/main'} component={Main} />\n     <Route path={process.env.PUBLIC_URL + '/:link'} component={LinkPage} />\n   </Switch>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n// \"homepage\": \"http://lexapetrov.github.io/obs-subs\",\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}