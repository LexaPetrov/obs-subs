{"version":3,"sources":["components/Checkbox.js","components/Main.js","components/LinkPage.js","App.js","serviceWorker.js","index.js"],"names":["name","value","text","onChange","checked","style","margin","className","type","props","loc","window","location","origin","useState","link","params","theme","goal","videos","subs","views","res","clicked","state","setState","handleChange","e","target","onSubmit","event","preventDefault","placeholder","required","Checkbox","trim","htmlFor","onClick","id","alt","src","channel","Object","keys","map","p","decodeURI","split","pathname","search","info","subscriberCount","videoCount","viewCount","vals","newParam","undefined","push","newParams","assign","n","i","useEffect","fetch","then","json","items","length","statistics","App","path","process","exact","component","Main","LinkPage","Boolean","hostname","match","ReactDOM","render","basename","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93dae7fe.chunk.js","sourcesContent":["import React from 'react'\nimport '../index.css'\n\nexport default ({ name, value, text, onChange, checked }) => {\n\n    return (\n        <div style={{margin: '20px'}}>\n            <label className=\"label\">\n                <div className=\"toggle\">\n                    <input className=\"toggle-state\" checked={checked} onChange={onChange} type=\"checkbox\" name={name} value={value} />\n                    <div className=\"toggle-inner\">\n                        <div className=\"indicator\"></div>\n                    </div>\n                    <div className=\"active-bg\"></div>\n                </div>\n                <div className=\"label-text\">{text}</div>\n            </label>\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport Checkbox from './Checkbox'\n\nimport '../index.css'\n\nexport default props => {\n    //https://www.youtube.com/channel/UC4-phUrGgm63fZ9qZ1GOxBQ?view_as=subscriber\n    const loc = window.location.origin\n    const [state, setState] = useState({\n        loc,\n        link: '',\n        // link: 'https://www.youtube.com/channel/UC4-phUrGgm63fZ9qZ1GOxBQ?view_as=subscriber',\n        params: {\n            theme: '1',\n            goal: '',\n            videos: false,\n            subs: true,\n            views: false\n        },\n        res: '',\n        clicked: false,\n        checked: false\n    })\n\n    function handleChange(e) {\n        setState({\n            ...state,\n            [e.target.name]: e.target.value\n        })\n    }\n\n    function buttonClick() {\n        let params = ''\n        Object.keys(state.params).map(p => {\n            if (state.params[p] !== '') {\n                params += `${p}=${state.params[p]}&`\n            }\n            return 0\n        })\n        let channel\n        if (state.link !== '') {\n            channel = decodeURI(state.link)\n            channel = channel.split('/')[4].split('?')[0]\n        }\n\n        setState({\n            ...state,\n            res: `${state.loc}/${channel}?${params}`,\n            clicked: true\n        })\n    }\n\n\n    function handleParamsChange(e) {\n        setState({\n            ...state,\n            params: {\n                ...state.params,\n                [e.target.name]: e.target.value.trim()\n            }\n        })\n    }\n\n\n    return (\n        <div className='wrapper'>\n            <div className='header'>\n                <h2>1. Вставь ссылку на канал в формате https://www.youtube.com/channel/[ID канала]</h2>\n            </div>\n            <div className='inputContainer'>\n                <form onSubmit={(event) => { event.preventDefault() }}>\n                    <input type='text' placeholder='Вставь ссылку' required value={state.link} name='link' onChange={handleChange} />\n                    <div className='tools'>\n                        <div>\n                            <Checkbox\n                                name='checked'\n                                onChange={() => setState({\n                                    ...state,\n                                    checked: !state.checked\n                                })}\n                                checked={state.checked}\n                                text='Добавить цель кол-ва подписчиков'\n                            />\n                            <div>\n                                {\n                                    state.checked ? <input\n                                        type='number'\n                                        value={state.params.goal}\n                                        name='goal'\n                                        placeholder='Введи число'\n                                        onChange={handleParamsChange}\n                                    /> : null\n                                }\n                            </div>\n\n                        </div>\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    subs: !state.params.subs\n                                }\n                            })}\n                            checked={state.params.subs}\n                            text='Показывать число подписчиков'\n                        />\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    videos: !state.params.videos\n                                }\n                            })}\n                            checked={state.params.videos}\n                            text='Показывать чисто загруженных видео'\n                        />\n                        <Checkbox\n                            onChange={() => setState({\n                                ...state,\n                                params: {\n                                    ...state.params,\n                                    views: !state.params.views\n                                }\n                            })}\n                            checked={state.params.views}\n                            text='Показывать число просмотров'\n                        />\n                    </div>\n                    <h2>2. Выбери тему для своего счётчика</h2>\n                    <div className='themes'>\n                        <div className='themeItem'>\n                            <label htmlFor='theme1'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '1'\n                                        }\n                                    })\n                                }} type=\"radio\" name=\"theme\" id='theme1' value=\"1\" />\n                                <img alt='' src='theme1.png' />\n                            </label>\n                        </div>\n                        <div className='themeItem'>\n                            <label htmlFor='theme2'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '2'\n                                        }\n                                    })\n                                }} type=\"radio\" id='theme2' name=\"theme\" value=\"2\" />\n                                <img alt='' src='theme2.png' />\n                            </label>\n                        </div>\n                        <div className='themeItem'>\n                            <label htmlFor='theme3'>\n                                <input onClick={() => {\n                                    setState({\n                                        ...state,\n                                        params: {\n                                            ...state.params,\n                                            theme: '3'\n                                        }\n                                    })\n                                }} type=\"radio\" name=\"theme\" id='theme3' value=\"3\" />\n                                <img alt='' src='theme3.png' />\n                            </label>\n                        </div>\n                    </div>\n                    <button type='submit' className='go' onClick={buttonClick}>\n                        3. Получи ссылку для OBS \n                    </button>\n                    <div>\n                        {\n                            state.clicked && state.link !== '' ? <input\n                                type='text'\n                                value={state.res}\n                                name='res'\n                                onChange={handleChange}\n                            /> : null\n                        }\n                        {\n                            state.clicked && state.link !== '' ?\n                                <h2>4. Вставь полученную ссылку в CLR браузер OBS</h2> : null\n                        }\n                    </div>\n                </form>\n\n            </div>\n        </div>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport '../index.css'\n\nexport default props => {\n    const link = window.location.pathname.split('/')[1]\n    const params = window.location.search.split('&')\n    params[0] = params[0].split('?')[1]\n    const [state, setState] = useState({\n        link,\n        info: {\n            subscriberCount: '',\n            videoCount: '',\n            viewCount: ''\n        },\n        params: {\n            theme: '',\n            goal: '',\n            videos: false,\n            subs: false,\n            views: false\n        }\n    })\n\n    let keys = []\n    let vals = []\n\n    params.map(p => {\n        let newParam = (p.split('='))\n        if (newParam[0] !== '' || newParam[1] !== undefined) {\n            keys.push(newParam[0])\n            vals.push(newParam[1])\n        }\n\n        return 0\n    })\n\n    let newParams = Object.assign(...keys.map((n, i) => ({ [n]: vals[i] })))\n    \n\n    useEffect(() => {\n        fetch(`https://www.googleapis.com/youtube/v3/channels?part=statistics&id=${state.link}&key=AIzaSyBj811HF4_j0-j_Q-NSvu0zA90Gipz4aNg`)\n            .then(res => {\n                return res.json()\n            })\n            .then((res) => {\n                if (res.items.length !== 0) {\n                    setState({\n                        ...state,\n                        info: {\n                            subscriberCount: res.items[0].statistics.subscriberCount,\n                            videoCount: res.items[0].statistics.videoCount,\n                            viewCount: res.items[0].statistics.viewCount\n                        },\n                        params: newParams\n                    })\n                }\n            })\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\n        \n    return (\n        <div className='wrapper'>\n            <div className={`link_theme${state.params.theme}`}>\n                {\n                state.params.subs !== false && state.params.goal !== '' && state.params.goal !== undefined\n                    ? <label>Подписчиков: {state.info.subscriberCount}  /  {state.params.goal} </label> \n                    : <label>Подписчиков: {state.info.subscriberCount} </label>\n                }\n                {\n                    state.params.videos !== false && <label>Загружено видео: {state.info.videoCount} </label>\n                }\n                {\n                    state.params.views !== false && <label>Просмотров всего: {state.info.viewCount} </label>\n                }\n            </div>\n        </div>\n    )\n}","import React from 'react'\nimport './index.css'\nimport { Route, Switch } from 'react-router-dom'\nimport Main from './components/Main'\nimport LinkPage from './components/LinkPage'\n\nfunction App() {\n  return (\n   <Switch>\n     <Route path={process.env.PUBLIC_URL + '/'} exact component={Main} />\n     <Route path={process.env.PUBLIC_URL + '/main'} component={Main} />\n     <Route path={process.env.PUBLIC_URL + '/:link'} component={LinkPage} />\n   </Switch>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n// \"homepage\": \"http://lexapetrov.github.io/obs-subs\",\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>\n  ,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}